#!/usr/bin/env python3

from dataclasses import dataclass
import os
import sys

sys.path.append(os.path.realpath(os.path.join(os.path.dirname(__file__), "../../py")))

import genv


@dataclass
class Device:
    index: int
    uuid: str
    total_memory: str
    used_memory: str

    @staticmethod
    def uuid_(index: int) -> str:
        suffix = f"0{index}" if index < 10 else f"{index}"
        return f"GPU-00000000-0000-0000-0000-0000000000{suffix}"


@dataclass
class Process:
    device: Device
    pid: int
    gpu_memory: str


args = sys.argv[1:]

indices = range(int(os.environ.get("GENV_MOCK_DEVICE_COUNT", "2")))

for i in range(len(args)):
    if args[i].startswith("--id="):
        indices = [int(index) for index in args[i].split("--id=")[1].split(",")]
        del args[i]
        break

devices = [
    Device(
        index=index,
        uuid=Device.uuid_(index),
        total_memory=os.environ.get("GENV_MOCK_DEVICE_TOTAL_MEMORY", "16g"),
        used_memory=os.environ.get(
            "GENV_MOCK_DEVICE_USED_MEMORY", "10mi"
        ),  # TODO(raz): calculate used memory by summing all processes
    )
    for index in indices
]


processes = [
    Process(
        device=device,
        pid=pid,
        gpu_memory=os.environ.get("GENV_MOCK_COMPUTE_APPS_GPU_MEMORY", "42mi"),
    )
    for pid in genv.os_.pgrep(
        os.environ.get("GENV_MOCK_COMPUTE_APPS_PROCESS_NAME", "sleep")
    )
    for device in devices
]


if args == []:
    print(
        """\
Fri Dec 23 23:11:41 2022
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 515.86.01    Driver Version: 515.86.01    CUDA Version: 11.7     |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|                               |                      |               MIG M. |
|===============================+======================+======================|
""",
        end="",
    )

    for device in devices:
        print(
            """\
|  {index:2}  NVIDIA GeForce ...  Off  | 00000000:01:00.0 Off |                  N/A |
| 30%   33C    P8    26W / 250W |  {used_memory:>5}MiB / {total_memory:>5}MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
""".format(
                index=device.index,
                used_memory=genv.utils.memory_to_memory(
                    device.used_memory, unit="mi", suffix=False
                ),
                total_memory=genv.utils.memory_to_memory(
                    device.total_memory, unit="mi", suffix=False
                ),
            ),
            end="",
        )

    print(
        """
+-----------------------------------------------------------------------------+
| Processes:                                                                  |
|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |
|        ID   ID                                                   Usage      |
|=============================================================================|
""",
        end="",
    )

    if len(processes) == 0:
        print(
            "|  No running processes found                                                 |"
        )
    else:
        for process in processes:
            name = genv.os_.cmdline(process.pid)[0]
            if len(name) > 28:
                name = f"...{name[-25:]}"

            print(
                "|   {index:2}   N/A  N/A    {pid:6}      C   {name:28}   {memory:>6}MiB |".format(
                    index=process.device.index,
                    pid=process.pid,
                    name=name,
                    memory=genv.utils.memory_to_memory(
                        process.gpu_memory, unit="mi", suffix=False
                    ),
                )
            )

    print(
        "+-----------------------------------------------------------------------------+"
    )

elif args == ["--query-gpu=uuid,index", "--format=csv,noheader"]:
    for device in devices:
        print(f"{device.uuid}, {device.index}")
elif args == [
    "--query-compute-apps=gpu_uuid,pid,used_gpu_memory",
    "--format=csv,noheader,nounits",
]:
    for process in processes:
        print(
            "{uuid}, {pid}, {gpu_memory}".format(
                uuid=process.device.uuid,
                pid=process.pid,
                gpu_memory=genv.utils.memory_to_memory(
                    process.gpu_memory, unit="mi", suffix=False
                ),
            )
        )
elif args == ["--query-gpu=memory.total", "--format=csv,noheader,nounits"]:
    for device in devices:
        print(genv.utils.memory_to_memory(device.total_memory, unit="mi", suffix=False))
elif (
        len(sys.argv) == 3
        and sys.argv[1] == "--query-gpu=index,uuid,timestamp,memory.used,memory.total,utilization.gpu,utilization.memory"
        and sys.argv[2] == "--format=csv,noheader,nounits"
):
    print("0, GPU-00000000-0000-0000-0000-000000000000, 86276428376, 10, 20, 1, 50")
    print("1, GPU-00000000-1000-0000-0000-000000000000, 86276428376, 5, 20, 15, 25")
else:
    cmdline = " ".join(args)
    print(
        f"nvidia-smi mock shim does not support command line '{cmdline}'",
        file=sys.stderr,
    )
    exit(1)
