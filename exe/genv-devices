#!/usr/bin/env python3

import argparse
from datetime import datetime
import os
import subprocess
import sys
from typing import Any, Callable, Dict, Iterable, List, Optional, Union

import genv

Device = Dict[Any, Any]
Devices = Dict[int, Device]

"""
This module manages all genv devices. Each genv device represents a single Nvidia gpu.
A device can be attached to 0, 1 or more environments.
"""


def get_devices_total_memory() -> Iterable[str]:
    """
    Get total memory of all devices as string using nvidia-smi.

    Cached for performance purposes as this should not change.
    Can be mocked using the GENV_MOCK_DEVICE_COUNT and GENV_MOCK_DEVICE_MEMORY environment variables.
    :return: A list of gpu devices memory.
            The memory at index i represents the memory (in mib) of the gpu device at index i.
    """

    def _impl():
        if 'GENV_MOCK_DEVICE_COUNT' in os.environ:
            return [os.environ.get('GENV_MOCK_DEVICE_MEMORY', '16g') for _ in range(int(os.environ['GENV_MOCK_DEVICE_COUNT']))]
        else:
            return [f'{int(line)}mi' for line in subprocess.check_output(
                "GENV_BYPASS=1 nvidia-smi --query-gpu=memory.total --format=csv,noheader,nounits",
                shell=True).splitlines()]

    # TODO(davidL): How do we refresh the device memory data for newly installed gpus or mock/non-mock shift?
    if not hasattr(get_devices_total_memory, '__cache__'):
        setattr(get_devices_total_memory, '__cache__', _impl())

    return getattr(get_devices_total_memory, '__cache__')


def factory() -> Dict:
    """
    Create a 'empty' state object for genv devices.
    :return: The state object (dict of dicts)
    """
    return dict(
        devices={index: {"eids": {}, "total_memory": total_memory} for index, total_memory in
                 enumerate(get_devices_total_memory())}
    )


def convert(json: Dict) -> None:
    """
    Mutating the loaded genv devices state object to represent the current devices state.
    Creates the 'total_memory' section for each device (if it doesn't exist) and translate all device indexes into ints.

    The index int conversion is needed because some numbers are saved as strings.
        They are saved as strings because dictionary keys in json files must be strings.
    """
    json["devices"] = {int(index): device for index, device in json["devices"].items()}

    # "total_memory" was added in version 0.1.2
    for index, device in json["devices"].items():
        if "total_memory" not in device:
            device["total_memory"] = get_devices_total_memory()[index]


def cleanup(devices: Devices, eid: Optional[str] = None, count: Optional[int] = None) -> None:
    """
    This function cleans (detaches) devices from a list of environments.
    :param devices: dictionary describing all existing genv devices.
    :param eid: When 'eid' is passed, only devices from this environment are cleaned.
            When 'eid' is not passed, devices from all deactivated environments are cleaned.
    :param count: When 'count' is passed, cleaning stops when this amount of devices are cleaned.
    :return: None
    """
    pred: Callable[[str], bool]

    if eid is not None:
        pred = lambda _: _ == eid
    else:
        eids = subprocess.check_output("genv exec envs query --query eid", shell=True).decode('utf-8').splitlines()
        pred = lambda eid: eid not in eids

    for index in sorted(devices.keys(), reverse=True):
        if count == 0:
            break

        device = devices[index]

        if len(device["eids"]) == 0:
            continue

        for candidate in list(device["eids"].keys()):
            if not pred(candidate):
                continue

            detach_device(device, candidate)

        if count is not None:
            if len(device["eids"]) == 0:
                count -= 1


def detach_device(device: Device, eid: str) -> None:
    """
    Detach device from a specific environment.
    :param device: device to detach.
    :param eid: environment id to detach the device from.
    :return: None
    """
    del device["eids"][eid]


def attach_devices(devices: Devices, eid: str, indices: Union[List[int], int], env_gpu_memory: Optional[str]) -> None:
    """
    Update devices state with the environment device attachments, including memory constraints .
    :param devices: dictionary describing all existing genv devices.
    :param eid: eid of the environment to which we will attach the devices.
    :param indices: Attached devices indices (can be one or more).
    :param env_gpu_memory: Attachment memory constraint.
    :return:
    """
    if isinstance(indices, int):
        indices = [indices]

    now = datetime.now().strftime(genv.DATETIME_FMT)

    for index in indices:
        env = dict(
            eid=eid,
            attached=now,
        )

        if env_gpu_memory is not None:
            env["gpu_memory"] = env_gpu_memory

        devices[index]["eids"][eid] = env


def find_available_device(devices: Devices, ignore: List[int], gpu_memory: Optional[str]) -> int:
    """
    Finds an available device for attachment. Takes into account memory constraint and device blacklist.
    :param devices: dictionary describing all existing genv devices.
    :param ignore: devices blacklist. Ignore this devices when looking for an available one
    :param gpu_memory: gpu memory constraint
    :return: available device index. If no device can satisfy the requirements, raises a RuntimeError.
    """
    for index, device in devices.items():
        if index in ignore:
            continue

        if is_device_available(device, gpu_memory):
            return index

    raise RuntimeError("No available devices")


def is_device_available(device: Device, gpu_memory: Optional[str]) -> bool:
    """
    Check for device availability.
    If a memory consumption constraint is specified, check if this amount is available on the device.
    Otherwise, a device must be non-attached to be considered "available".
    :param device:
    :param gpu_memory: memory constraint (optional)
    :return: True iff the device is available
    """
    return len(device["eids"]) == 0 if gpu_memory is None else get_device_unallocated_memory_bytes(
        device) >= genv.memory_to_bytes(gpu_memory)


def get_device_unallocated_memory_bytes(device) -> int:
    """
    Get the device unallocated memory in bytes.
    If a device is attached without specifying memory consumption constraint,
     then all of the devices memory is considered "allocated".
    :param device:
    :return: unallocated memory in bytes.
    """
    unallocated_memory_bytes = genv.memory_to_bytes(device["total_memory"])

    for env in device["eids"].values():
        if "gpu_memory" not in env:
            return 0  # the environment uses all the device memory
        else:
            unallocated_memory_bytes -= genv.memory_to_bytes(env["gpu_memory"])

    return max(unallocated_memory_bytes, 0)  # convert negative values when device is overallocated


def find_available_devices(devices: Devices, count: int, ignore: List[int], gpu_memory: Optional[str]) -> List[int]:
    """
    Find count available devices, considering blacklist and memory constraints.
     If not enough devices are available, RuntimeError error will be raised.
    :param devices: dictionary describing all existing genv devices.
    :param count: max num of available devices to find
    :param ignore: devices blacklist. all these devices will be ignored
    :param gpu_memory: memory constraint (optional)
    :return: a list of available device indices
    """
    indices = []
    for _ in range(count):
        indices.append(find_available_device(devices, ignore + indices, gpu_memory))

    return indices


def query(devices: Devices, eid: str) -> List[int]:
    """
    List all devices attached to an specific environment.
    :param devices: dictionary describing all existing genv devices.
    :param eid: queried environment id.
    :return: list of all devices indices attached to the environment.
    """
    return [index for index, device in devices.items() if eid in device["eids"]]


def do_attach(devices: Devices, eid: str, count: Optional[int], index: Optional[int]) -> None:
    """
    Attaches devices to an environment and print the device indices.
    Either ensures that a specified count is attached to the environment,
     or explicitly tries to attach a device with a given index.
    :param devices: dictionary describing all existing genv devices.
    :param eid: eid of the environment for which we attach the devices.
    :param count: number of devices to attach. Cannot be used in conjunction with the 'index' parameter.
    :param index: index of a specific device we want to attach to the environment.
     Cannot be used in conjunction with the 'count' parameter.
    :return: None
    """
    attached = query(devices, eid)
    env_gpu_memory = get_env_gpu_memory(args.eid)

    def ensure_count():
        """
        On attach command, attach or detach devices from the environment according to
         the number of devices requested in the environment's configuration.
        :return: None
        """
        current = len(attached)

        if current < count:
            if count > len(devices):
                raise RuntimeError(f"Requested more devices ({count}) than total available ({len(devices)})")

            indices = find_available_devices(devices, count - current, attached, env_gpu_memory)

            attach_devices(devices, eid, indices, env_gpu_memory)
        elif current > count:
            cleanup(devices, eid, current - count)

    def attach_by_index():
        """
        Attach a specific device to our environment, as request by the attach command.
        If the device is already attached to another environment, validate that device over-allocation is enabled
         and the memory constrains will hold.
        :return: None
        """
        if index not in attached:
            if int(os.environ.get('GENV_ALLOW_DEVICE_OVER_ALLOCATION', 0)) == 0 and not is_device_available(
                    devices[index], env_gpu_memory):
                raise RuntimeError(f"Device {index} is not available")

            attach_devices(devices, eid, index, env_gpu_memory)

    # TODO(raz): should this try/except be moved to main()?
    try:
        if count is not None:
            ensure_count()
        elif index is not None:
            attach_by_index()
    except RuntimeError as e:
        print(e, file=sys.stderr)
        exit(1)

    do_query(devices, eid)  # print the up-to-date device indices


def get_env_gpu_memory(eid: int) -> Optional[str]:
    """
    Query the configured GPU memory of an environment.

    Returns 'None' if not configured.
    :param eid: Environment to query
    :return: return the configured gpu memory, or None if not configured
    """
    # TODO(raz): could this cause a deadlock if envs manager would query this manager?
    return subprocess.check_output(f"genv exec envs query --eid {eid} --query config.gpu_memory", shell=True).decode(
        'utf-8').strip() or None


def do_detach(devices: Devices, eid: str, index: Optional[int]) -> None:
    """
    Detach devices from a given environment. After detaching, print environment-devices current relationship.
    Either the device to detach is given, or a general cleanup is called on the environment.
    :param devices: dictionary describing all existing genv devices.
    :param eid: eid for the environment we are working on.
    :param index: an index of the specific device to detach.
                If no index is given a general cleanup is called on the environment.
    :return: None
    """
    if index is not None:
        if index in devices:
            device = devices[index]

            if eid in device["eids"]:
                detach_device(device, eid)
    else:
        cleanup(devices, eid)

    do_query(devices, eid)  # print the up-to-date device indices


def do_ps(devices: Devices, format: str, header: bool, timestamp: bool) -> None:
    """
    Print genv devices data in a human-readable fashion to the stdio.
    :param devices: dictionary describing all existing genv devices.
    :param format: Which format should be used to print the devices data - csv or tui.
    :param header: a flag instructing if we should print a header as part of the output.
    :param timestamp: a flag instructing if we should print attachment time as is or relative duration (now - creation).
    :return: None
    """
    envs = {}
    for line in subprocess.check_output("genv exec envs query --query eid config.name", shell=True).decode(
            'utf-8').splitlines():
        eid, name = line.split(',')
        envs[eid] = name

    if header:
        if format == 'csv':
            print('ID,ENV ID,ENV NAME,ATTACHED')
        elif format == 'tui':
            print('ID      ENV ID      ENV NAME        ATTACHED')

    def print_line(index, eid, name, attached):
        if format == 'csv':
            print(f'{index},{eid},{name},{attached}')
        elif format == 'tui':
            print(f'{index:<8}{eid:<12}{name:<16}{attached}')

    for index, device in devices.items():
        if len(device["eids"]) == 0:
            print_line(index, '', '', '')
        else:
            for eid, info in device["eids"].items():
                name = envs.get(eid, '')
                attached = info["attached"] if timestamp else genv.time_since(info["attached"])

                print_line(index, eid, name, attached)


def do_query(devices: Devices, eid: str) -> None:
    """
    Print all the indices of devices attached to a specific environment
    :param devices: dictionary describing all existing genv devices.
    :param eid: eid for the environment we are working on.
    :return: None
    """
    print(','.join(str(index) for index in query(devices, eid)))


def parse_args() -> argparse.Namespace:
    def attach(parser):
        parser.add_argument('--eid', required=True, help='Environment identifier')
        group = parser.add_mutually_exclusive_group(required=True)
        group.add_argument('--count', type=int, help='Total devices count to be attached')
        group.add_argument('--index', type=int, help='Device index to attach specifically')

    def detach(parser):
        parser.add_argument('--eid', required=True, help='Environment identifier')
        parser.add_argument('--index', type=int, help='Device index to dettach')

    def ps(parser):
        parser.add_argument('--no-header', dest='header', action='store_false', help='Do not print column headers')
        parser.add_argument('--timestamp', action='store_true', help='Print a non-prettified timestamp')
        parser.add_argument('--format', choices=['csv', 'tui'],
                            help='Output format; CSV or TUI (Text-based user interface)', default='tui')

    def query(parser):
        parser.add_argument('--eid', required=True, help='Environment identifier')

    parser = argparse.ArgumentParser(description=f'genv device manager')
    parser.add_argument('--no-cleanup', dest='cleanup', action='store_false', help='Do not perform clean up')
    parser.add_argument('--reset', action='store_true', help='Reset previous state')

    subparsers = parser.add_subparsers(dest='command')

    for command, help in [
        (attach, 'Attach devices to an environment'),
        (detach, 'Detach devices from an environment'),
        (ps, 'Print information about devices'),
        (query, 'Query devices of an environment'),
    ]:
        command(subparsers.add_parser(command.__name__, help=help))

    return parser.parse_args()


if __name__ == "__main__":
    args = parse_args()

    with genv.access_json('devices.json', factory, convert=convert, reset=args.reset) as json:
        devices: Devices = json["devices"]

        if args.cleanup:
            cleanup(devices)

        if args.command == 'attach':
            do_attach(devices, args.eid, args.count, args.index)
        elif args.command == 'detach':
            do_detach(devices, args.eid, args.index)
        elif args.command == 'ps':
            do_ps(devices, args.format, args.header, args.timestamp)
        elif args.command == 'query':
            do_query(devices, args.eid)
