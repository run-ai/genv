#!/usr/bin/env python3

import argparse
import asyncio
import sys
from typing import Iterable, Optional

from genv import nvidia_smi_snapshots, snapshot_to_monitor_output, FileOutputType, Runner, LocalRunner, SshRunner


def calc_host_runner(hosts: Optional[Iterable[str]]) -> Iterable[Runner]:
    if not hosts:
        return [LocalRunner()]
    else:
        return [SshRunner(host) for host in hosts]


async def do_execute(hosts: Optional[Iterable[str]], filepath: str, output_format: str) -> None:
    if output_format == "json":
        output_type = FileOutputType.JSON
    else:
        output_type = FileOutputType.CSV

    hosts_runners = calc_host_runner(hosts)
    snapshots = await nvidia_smi_snapshots(hosts_runners)

    with open(filepath, 'w') if filepath else sys.stdout as fp:
        snapshot_to_monitor_output(snapshots, fp, output_type)


async def main(args: argparse.Namespace, hosts: Optional[Iterable[str]]) -> None:
    """
    Parses the arguments and runs the requested command.

    :return: None
    """
    await do_execute(hosts, args.path, args.format)


def parse_args() -> argparse.Namespace:
    """
    Parses the arguments passed to this executable.

    :return: Argument values
    """
    parser = argparse.ArgumentParser()

    group = parser.add_mutually_exclusive_group(required=False)
    group.add_argument(
        "-H",
        "-host",
        "--host",
        dest="hosts",
        help="Comma-separated hostnames or IP addresses",
    )
    group.add_argument(
        "-hostfile",
        "--hostfile",
        help="A file containing one hostname or IP address per line",
    )

    parser.add_argument(
        "--format",
        choices=["json", "csv"],
        help="Output format (%(choices)s)",
        default="csv",
    )
    parser.add_argument(
        "--path",
        help="Output file path",
        type=str
    )

    return parser.parse_args()


if __name__ == "__main__":
    args = parse_args()

    if args.hostfile:
        with open(args.hostfile, "r") as f:
            hosts = [line for line in [line.strip() for line in f.readlines()] if line]
    elif args.hosts:
        hosts = args.hosts.split(",")
    else:
        hosts = None

    try:
        asyncio.run(main(args, hosts))
    except RuntimeError as e:
        print(e, file=sys.stderr)
        exit(1)
