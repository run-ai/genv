#!/usr/bin/env python3

import argparse
from datetime import datetime
from typing import Any, Callable, Dict, List, Optional, Union

import genv

Env = Dict[Any, Any]
Envs = Dict[int, Env]

QUERIES = {
    'eid': lambda env: env["eid"],
    'creation': lambda env: env["creation"],
    'config.name': lambda env: env["config"].get("name"),
    'config.gpus': lambda env: env["config"].get("gpus"),
    'config.gpu_memory': lambda env: env["config"].get("gpu_memory"),
}


def factory() -> Dict:
    """
    Create a 'empty' state object for genv environments.
    :return: The state object (dict of dicts)
    """
    return dict(
        envs={}
    )


def cleanup(
        envs: Envs,
        poll_pid: Callable[[int], bool] = genv.poll_pid,
        poll_kernel: Callable[[str], bool] = genv.poll_jupyter_kernel) -> None:
    """
    Clean up processes, kernels and environments.
    :param envs: dictionary describing all existing environments.
    :param poll_pid: a predicate which tells us which pids are still connected to the environment.
    :param poll_kernel: a predicate which tells us which jupyter kernels are still connected to the environment.
    :return:
    """
    for env in envs.values():
        if "pids" in env:
            env["pids"] = [pid for pid in env["pids"] if poll_pid(pid)]

        if "kernel_ids" in env:
            env["kernel_ids"] = [kernel_id for kernel_id in env["kernel_ids"] if poll_kernel(kernel_id)]

    def _should_cleanup_env(env):
        for key in ["pids", "kernel_ids"]:
            if key in env and len(env[key]) > 0:
                return False

        return True

    for eid in [eid for eid, env in envs.items() if _should_cleanup_env(env)]:
        del envs[eid]


def find(envs: Envs, pid: Optional[int], kernel_id: Optional[str]) -> Union[int, None]:
    """
    Find the environment which is connected to the pid or kernel given
    :param envs: dictionary describing all existing environments.
    :param pid:
    :param kernel_id:
    :return: Return appropriate environments id
    """
    for query, field in [
        (pid, "pids"),
        (kernel_id, "kernel_ids"),
    ]:
        for eid, env in envs.items():
            if query is None:
                continue

            if field not in env:
                continue

            if query not in env[field]:
                continue

            return eid


def do_activate(envs: Envs, eid: str, uid: int, username: Optional[str], pid: Optional[int],
                kernel_id: Optional[str]) -> None:
    """
    Activates an environment - fill/update username, process ids and jupyter kernel ids.
     If an appropriate environment doesn't exists, create one.
    :param envs: dictionary describing all existing environments.
    :param eid: environment id for the environment to activate.
    :param uid:
    :param username: Environment username.
    :param pid:
    :param kernel_id:
    :return: None
    """
    if eid not in envs:
        envs[eid] = dict(
            eid=eid,
            uid=uid,
            creation=datetime.now().strftime(genv.DATETIME_FMT),
            config={},
        )

    env = envs[eid]

    if username is not None:
        envs[eid]["username"] = username

    if pid is not None:
        if "pids" not in env:
            env["pids"] = []

        env["pids"].append(pid)
    elif kernel_id is not None:
        if "kernel_ids" not in env:
            env["kernel_ids"] = []

        env["kernel_ids"].append(kernel_id)


def do_find(envs: Envs, pid: Optional[int], kernel_id: Optional[str]) -> None:
    """
    Query genv environments to find which one is related to the given process/kernel. The result is printed to stdio.
    :param envs: dictionary describing all existing environments.
    :param pid: process id to query for (optional)
    :param kernel_id: jupyter kernel id to query for (optional).
    :return: None
    """
    eid = find(envs, pid, kernel_id)

    if eid is not None:
        print(eid)


def do_config(envs: Envs, eid: str, command: str, args: argparse.Namespace) -> None:
    """
    Update environment config variables - either set a specific variable or clear it.
    :param envs: dictionary describing all existing environments.
    :param eid: environment to change
    :param command: a string describing which variable in the environment config to change
    :param args: parameters for the config change.
                For example - gpus count variable, clear/not clear config variable, etc.
    :return: None
    """
    env: Env = envs.get(eid)

    if env is None:
        return

    def gpus(count: Optional[int], clear: bool) -> None:
        if count is not None:
            env["config"]["gpus"] = count

        if clear and "gpus" in env["config"]:
            del env["config"]["gpus"]

    def name(name: Optional[str], clear: bool) -> None:
        if name is not None:
            env["config"]["name"] = name

        if clear and "name" in env["config"]:
            del env["config"]["name"]

    def gpu_memory(gpu_memory: Optional[str], clear: bool) -> None:
        # TODO(raz): validate the specification

        if gpu_memory is not None:
            env["config"]["gpu_memory"] = gpu_memory

        if clear and "gpu_memory" in env["config"]:
            del env["config"]["gpu_memory"]

    if command == 'gpus':
        gpus(args.count, args.clear)
    elif command == 'name':
        name(args.name, args.clear)
    elif command == 'gpu-memory':
        gpu_memory(args.gpu_memory, args.clear)


def do_deactivate(envs: Envs, pid: int) -> None:
    """
    Deactivate the genv environment with the current shell.
    Removes the current shell connection to it's environment, and cleans all jupyter kernels.
    :param envs: dictionary describing all existing environments.
    :param pid: the pid of the current shell
    :return: None
    """
    cleanup(envs, poll_pid=lambda pid_: pid_ != pid)


def do_ps(envs: Envs, format: str, header: bool, timestamp: bool) -> None:
    """
    Print environments data in a human-readable fashion to the stdio.
    :param envs: dictionary describing all existing environments.
    :param format: Which format should be used to print the environment data - csv or tui (default: tui).
    :param header: a flag instructing if we should print a header as part of the output (default: print header).
    :param timestamp: a flag instructing if we should print creation time as is or relative duration (now - creation).
                    (default: relative duration)
    :return: None
    """
    if header:
        if format == 'csv':
            print('ID,USER,NAME,CREATED,PID(S)')
        elif format == 'tui':
            print('ID      USER            NAME            CREATED              PID(S)')

    for env in envs.values():
        eid = env["eid"]
        user = f'{env["username"]}({env["uid"]})' if "username" in env else env["uid"]
        name = env["config"].get("name", '')
        created = env["creation"] if timestamp else genv.time_since(env["creation"])
        pids = ' '.join(str(pid) for pid in env.get("pids", []))
        # TODO(raz): print kernel ids

        if format == 'csv':
            print(f'{eid},{user},{name},{created},{pids}')
        elif format == 'tui':
            print(f'{eid:<8}{user:<16}{name:<16}{created:<21}{pids}')


def do_query(envs: Envs, eid: Optional[str], queries: List[str]) -> None:
    """
    Query environment data using a query string. The queries results will be printed into the stdio.
    :param envs: dictionary describing all existing environments.
    :param eid: eid pointing to the environment to query. If none, query all environments.
    :param queries: list of data queries to run over the environment.
    :return: None
    """
    eids = [eid] if eid is not None else list(envs.keys())

    for eid in eids:
        env = envs.get(eid)

        if env is None:
            continue

        query = lambda name: str(QUERIES[name](env) or '')

        print(','.join(query(name) for name in queries))


def parse_args() -> argparse.Namespace:
    """
    Set all possible genv environments commands and their arguments.
    :return:
    """
    def activate(parser):
        parser.add_argument('--eid', required=True, help='Environment identifier')
        parser.add_argument('--uid', type=int, required=True, help='User identifier')
        parser.add_argument('--username', help='User name')

        group = parser.add_mutually_exclusive_group(required=True)

        group.add_argument('--pid', type=int, help='Process identifier')
        group.add_argument('--kernel-id', help='Jupyter kernel identifier')

    def config(parser):
        def gpus(parser):
            group = parser.add_mutually_exclusive_group(required=True)
            group.add_argument('--count', type=int, help='Device count')
            group.add_argument('--clear', action='store_true', help='Clear device count')

        def name(parser):
            group = parser.add_mutually_exclusive_group(required=True)
            group.add_argument('--name', help='Environment name')
            group.add_argument('--clear', action='store_true', help='Clear environment name')

        def gpu_memory(parser):
            group = parser.add_mutually_exclusive_group(required=True)
            group.add_argument('--gpu-memory', help='Environment GPU memory capacity')
            group.add_argument('--clear', action='store_true', help='Clear environment GPU memory capacity')

        parser.add_argument('--eid', required=True, help='Environment identifier')

        subparsers = parser.add_subparsers(dest='config', required=True)

        for option in [
            (gpus, 'Configure device count for environment'),
            (name, 'Configure environment name'),
            (gpu_memory, 'gpu-memory', 'Configure environment GPU memory capacity')
        ]:
            if len(option) == 2:
                command, help = option
                name_ = command.__name__
            else:
                command, name_, help = option

            command(subparsers.add_parser(name_, help=help))

    def deactivate(parser):
        parser.add_argument('--pid', type=int, required=True, help='Process identifier')

    def find(parser):
        group = parser.add_mutually_exclusive_group(required=True)

        group.add_argument('--pid', type=int, help='Process identifier')
        group.add_argument('--kernel-id', help='Jupyter kernel identifier')

    def ps(parser):
        parser.add_argument('--no-header', dest='header', action='store_false', help='Do not print column headers')
        parser.add_argument('--timestamp', action='store_true', help='Print a non-prettified timestamp')
        parser.add_argument('--format', choices=['csv', 'tui'],
                            help='Output format; CSV or TUI (Text-based user interface)', default='tui')

    def query(parser):
        parser.add_argument('--eid', help='Environment identifier')
        parser.add_argument('--query', '--queries', dest='queries', nargs='+', choices=QUERIES.keys(), required=True)

    parser = argparse.ArgumentParser(description=f'genv environment manager')
    parser.add_argument('--no-cleanup', dest='cleanup', action='store_false', help='Do not perform clean up')
    parser.add_argument('--reset', action='store_true', help='Reset previous state')

    subparsers = parser.add_subparsers(dest='command')

    for command, help in [
        (activate, 'Activate a process or a Jupyter kernel'),
        (config, 'Configure an environment'),
        (deactivate, 'Deactivate a process or a Jupyter kernel'),
        (find, 'Find the environment of a process or a Jupyter kernel'),
        (ps, 'Print information about active environments'),
        (query, 'Query environments or a specific one'),
    ]:
        command(subparsers.add_parser(command.__name__, help=help))

    return parser.parse_args()


if __name__ == "__main__":
    args = parse_args()

    with genv.access_json('envs.json', factory, reset=args.reset) as json:
        envs: Envs = json["envs"]

        if args.cleanup:
            cleanup(envs)

        if args.command == 'activate':
            do_activate(envs, args.eid, args.uid, args.username, args.pid, args.kernel_id)
        elif args.command == 'config':
            do_config(envs, args.eid, command=args.config, args=args)
        elif args.command == 'deactivate':
            do_deactivate(envs, args.pid)
        elif args.command == 'find':
            do_find(envs, args.pid, args.kernel_id)
        elif args.command == 'ps':
            do_ps(envs, args.format, args.header, args.timestamp)
        elif args.command == 'query':
            do_query(envs, args.eid, args.queries)
