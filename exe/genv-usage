#!/usr/bin/env python3

import argparse
import asyncio
import json
import sys
from typing import Optional

import genv

# TODO(raz): should this executable be merged to genv-remote?


async def do_execute() -> None:
    report = json.loads(sys.stdin.read(), cls=genv.JSONDecoder)

    genv.enforce.execute(report)


async def do_snapshot(format: str, type: Optional[str]) -> None:
    if type is None:
        snapshot = await genv.snapshot()
    elif type == "devices":
        snapshot = await genv.devices.snapshot()
    elif type == "envs":
        snapshot = genv.envs.snapshot()
    elif type == "processes":
        snapshot = await genv.processes.snapshot()
    else:
        raise ValueError(f"Unsupported snapshot type ({type})")

    if format == "json":
        print(json.dumps(snapshot, cls=genv.JSONEncoder, indent=2))


def parse_args() -> argparse.Namespace:
    """
    Set all possible genv environments commands and their arguments.

    :return: Parsed arguments
    """

    def execute(parser):
        pass

    def snapshot(parser):
        parser.add_argument(
            "--format",
            choices=["json"],
            help="Output format (%(choices)s)",
            default="json",
        )

        parser.add_argument(
            "--type",
            choices=["devices", "envs", "processes"],
            help="Take a snapshot of specific information",
        )

    parser = argparse.ArgumentParser()

    subparsers = parser.add_subparsers(dest="command", required=True)

    for command, help in [
        (execute, "Execute the report passed in stdin"),
        (snapshot, "Take a snapshot of GPU usage"),
    ]:
        command(subparsers.add_parser(command.__name__, help=help))

    return parser.parse_args()


async def main() -> None:
    args = parse_args()

    if args.command == "execute":
        await do_execute()
    elif args.command == "snapshot":
        await do_snapshot(args.format, args.type)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except RuntimeError as e:
        print(e, file=sys.stderr)
        exit(1)
    except KeyboardInterrupt:
        pass
